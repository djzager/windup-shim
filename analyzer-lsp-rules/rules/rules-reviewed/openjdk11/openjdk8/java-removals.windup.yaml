- - message: The `java.lang.Thread.stop(Throwable)` method has been removed, as it
      is dangerous for a thread to not only be able to directly stop another thread,
      but with an exception it may not expect. Instead, the thread should be notified
      to stop using a shared variable or `interrupt()`.. The `java.lang.Thread.destroy()`
      method was never even implemented and just throws `NoSuchMethodError`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-0
    when:
      or:
      - java.referenced:
          location: METHOD_CALL
          pattern: java.lang.Thread.stop({.+})
      - java.referenced:
          location: METHOD_CALL
          pattern: java.lang.Thread.destroy(*)
  - message: Java 9 introduced the `StackWalker API` to replace `sun.reflect.Reflection`..
      As such, the use of `sun.reflect.Reflection` class and particular the `getCallerClass`
      method should no longer be needed.. Refer to the example changeset linked below.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-1
    when:
      or:
      - java.referenced:
          location: IMPORT
          pattern: sun.reflect.Reflection*
      - java.referenced:
          location: METHOD_CALL
          pattern: sun.reflect.Reflection*
  - message: '`sun.reflect.CallerSensitive` annotation was deprecated in Java 9..
      Refer to the example changeset linked below.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-2
    when:
      or:
      - java.referenced:
          location: IMPORT
          pattern: sun.reflect.CallerSensitive*
      - java.referenced:
          location: ANNOTATION
          pattern: sun.reflect.CallerSensitive*
  - message: The `javax.security.auth.Policy` class has been removed.. It should be
      replaced by the use of `java.security.Policy` and `java.security.ProtectionDomain`..
      Usage of `policy.getPermissions(subject,codeSource)` should be  replaced with
      a call to. policy.getPermissions passing in a new ProtectionDomain (see links
      below for details)
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-3
    when:
      java.referenced:
        pattern: javax.security.auth.Policy
  - message: Due to modularisation, the methods `java.lang.SecurityManager.checkAwtEventQueueAccess()`,.
      `java.lang.SecurityManager.checkSystemClipboardAccess()` and. `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object)`.
      have been removed, so that the core SecurityManager class does not depend on
      the AWT stack.. Replace with a call to `java.lang.SecurityManager.checkPermission(java.security.Permission)`
      as follows:. `java.lang.SecurityManager.checkAwtEventQueueAccess()` --> `java.lang.SecurityManager.checkPermission(new
      AWTPermission("accessEventQueue"))`. `java.lang.SecurityManager.checkSystemClipboardAccess()`
      --> `java.lang.SecurityManager.checkPermission(new AWTPermission("accessClipboard"))`.
      `java.lang.SecurityManager.checkTopLevelWindow(java.lang.Object) --> java.lang.SecurityManager.checkPermission(new
      AWTPermission("showWindowWithoutWarningBanner"))`
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-4
    when:
      java.referenced:
        pattern: java.lang.SecurityManager.(checkAwtEventQueueAccess|checkSystemClipboardAccess|checkTopLevelWindow)(*)
  - message: The implementation of `java.lang.SecurityManager.checkMemberAccess(java.lang.Class,
      int)` relies on an assumption. that the caller is at a stack depth of 4, which
      is not something that can be enforced, making the code error-prone.. Replace
      with a call to `java.lang.SecurityManager.checkPermission(new RuntimePermission("accessDeclaredMembers"))`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-5
    when:
      java.referenced:
        pattern: java.lang.SecurityManager.checkMemberAccess(*)
  - message: '`java.util.logging.LogManager.addPropertyChangeListener()` method was
      removed in Java 9.. In order to listen to property change events, please consider
      overriding the `java.util.logging.LogManager.readConfiguration` methods,. which
      previously triggered property change events for the registered listeners.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-6
    when:
      java.referenced:
        pattern: java.util.logging.LogManager.addPropertyChangeListener(*)
  - message: '`java.util.logging.LogManager.removePropertyChangeListener()` method
      was removed in Java 9.. In order to listen to property change events, please
      consider overriding the `java.util.logging.LogManager.readConfiguration` methods,.
      which previously triggered property change events for the registered listeners.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-7
    when:
      java.referenced:
        pattern: java.util.logging.LogManager.removePropertyChangeListener(*)
  - message: Property listener methods on `Pack200.Packer` and `Pack200.Unpacker`
      have been removed.. Instead, a strategy based on polling the `PROGRESS` value
      maintained by `java.util.jar.Pack200.Packer`. or `java.util.jar.Pack200.Unpacker`
      is recommended.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-8
    when:
      or:
      - java.referenced:
          pattern: java.util.jar.Pack200.Packer.addPropertyChangeListener(*)
      - java.referenced:
          pattern: java.util.jar.Pack200.Packer.removePropertyChangeListener(*)
      - java.referenced:
          pattern: java.util.jar.Pack200.Unpacker.addPropertyChangeListener(*)
      - java.referenced:
          pattern: java.util.jar.Pack200.Unpacker.removePropertyChangeListener(*)
  - message: The `sun.misc.Unsafe` API is scheduled for removal in the long term,
      and some of its methods have been removed. In short term, please consider the
      following:. - The `get` and `put` methods have equivalents that take long offsets
      (OpenJDK 8's version of the removed methods just casts the int offsets and used
      the long versions).. - `fieldOffset(Field)` should be replaced by `staticFieldOffset(Field)`
      and `ObjectFieldOffset(Field)`.. - `staticFieldBase(Class)` should be replaced
      by asking for a specific field with `staticFieldBase(Field)`. The removed method
      only returned the address of the first static field in the class and relied
      on the assumption that the JVM stored all statics together, which may not be
      true.. - `tryMonitorEnter(Object)` and `monitorExit(Object)` can be replaced
      with use of the Java synchronized primitives, as illustrated in the test changes
      for JDK-8054494 (see links below).. In the long term, please consider using
      Variable Handles (see the link below)
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-9
    when:
      java.referenced:
        pattern: sun.misc.Unsafe.(getInt|putInt|getFloat|putFloat|getDouble|putDouble|getBoolean|putBoolean|getObject|putObject|getByte|putByte|getChar|putChar|getShort|putShort|getLong|putLong|fieldOffset|staticFieldBase|tryMonitorEnter|monitorEnter|monitorExit)(*)
  - message: The `sun.misc.BASE64{encoder-decoder}` class has been removed.. It can
      be replaced with `Base64.{encoder-decoder}` class instantiated using `java.util.Base64.getMime{encoder-decoder}()`
      method.. For further examples on how to replace the `BASE64{encoder-decoder}`
      class with `Base64.{encoder-decoder}` one, refer to the "Code example" link
      below.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-10
    when:
      java.referenced:
        pattern: sun.misc.BASE64(Encoder|Decoder)*
  - message: The `java.lang.System.runFinalizersOnExit(boolean value)` and `java.lang.Runtime.runFinalizersOnExit(boolean
      value)`. have been removed as they are regarded as inherently unsafe. Running
      finalizers on exit was disabled by default. and enabling it could result in
      finalizers being called on live objects which are still being manipulated by
      other threads.. Remove these method calls.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-11
    when:
      or:
      - java.referenced:
          pattern: java.lang.System.runFinalizersOnExit(*)
      - java.referenced:
          pattern: java.lang.Runtime.runFinalizersOnExit(*)
  - message: The `java.awt.Font.getPeer()` and `java.awt.Component.getPeer()` methods
      have been removed.. The `java.awt.peer` and `java.awt.dnd.peer` are no longer
      accessible and are considered. internal implementation details, the API may
      be removed without notice or changed in non. compatible ways.. Methods exposing
      this API, such as `java.awt.Font.getPeer()` have been removed since JDK 9..
      Since Font rendering is platform independent, there are no substitutes for this
      method.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-12
    when:
      or:
      - java.referenced:
          location: METHOD_CALL
          pattern: java.awt.Font.getPeer(*)
      - java.referenced:
          location: METHOD_CALL
          pattern: java.awt.Component.getPeer(*)
  - message: The changes that were implemented in JDK 9 may impact code that creates
      class loaders with null (that is, the bootstrap class loader). as the parent
      class loader and assumes that all platform classes are visible to the parent..
      Such code may need to be changed to use the platform class loader as the parent
      (see the links below)
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/openjdk11/openjdk8/java-removals.windup.xml-13
    when:
      java.referenced:
        pattern: java.lang.ClassLoader
