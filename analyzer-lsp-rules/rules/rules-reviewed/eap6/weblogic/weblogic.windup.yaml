- - message: WebLogic scheduled jobs should be migrated to use the standard EJB `javax.ejb.TimerService`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-0
    when:
      java.referenced:
        location: IMPLEMENTS_TYPE
        pattern: weblogic.time.common.Triggerable
  - message: Replace with the `StringUtils` class from Apache Commons.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-1
    when:
      java.referenced:
        pattern: weblogic.utils.StringUtils.{*}
  - message: Code using this package should be replaced with code using the org.apache.xml
      package from [Apache Xerces](http://xerces.apache.org/).
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-2
    when:
      java.referenced:
        pattern: weblogic.apache.xml.{*}
  - message: Replace with the Java EE standard [javax.transaction.TransactionManager](http://docs.oracle.com/javaee/7/api/javax/transaction/TransactionManager.html)
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-3
    when:
      java.referenced:
        pattern: weblogic.transaction.(Client)*TransactionManager
  - message: Replace with the Java EE standard method `javax.transaction.TransactionManager.resume(Transaction
      tx)`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-4
    when:
      or:
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.TransactionManager.resume{*}
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.TransactionManager.forceResume{*}
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.ClientTransactionManager.resume{*}
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.ClientTransactionManager.forceResume{*}
  - message: Replace with the Java EE standard `javax.transaction.TransactionManager.suspend()`
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-5
    when:
      or:
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.TransactionManager.suspend{*}
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.TransactionManager.forceSuspend{*}
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.ClientTransactionManager.suspend{*}
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.transaction.ClientTransactionManager.forceSuspend{*}
  - message: Remove the `weblogic.transaction.TxHelper` import statement.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-6
    when:
      java.referenced:
        location: IMPORT
        pattern: weblogic.transaction.TxHelper
  - message: Look up the Java Enterprise Edition `javax.transaction.TransactionManager`
      in JBoss EAP using the following code:. ```java. InitialContext context = new
      InitialContext();. TransactionManager transactionManager =. (TransactionManager)context.lookup("java:jboss/TransactionManager");.
      ```
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-7
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: weblogic.transaction.(Client)*TxHelper.getTransactionManager()
  - message: This Oracle and WebLogic proprietary code (`OracleThinClob`) should be
      replaced with the use of the java.sql.Clob interface.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-8
    when:
      java.referenced:
        pattern: weblogic.jdbc.vendor.oracle.OracleThinClob
  - message: This code is specific to WebLogic and should be replaced with `java.sql.Clob.setCharacterStream(1)`
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-9
    when:
      java.referenced:
        pattern: weblogic.jdbc.vendor.oracle.OracleThinClob.getCharacterOutputStream()
  - message: The WebLogic `NonCatalogLogger` is not supported on JBoss EAP, and should
      be migrated to a supported logging framework,. such as the JDK Logger or JBoss
      Logging:. ```java. import java.util.logging.Logger;. Logger LOG = Logger.getLogger("MyLogger");.
      ```
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-10
    when:
      or:
      - java.referenced:
          location: METHOD_CALL
          pattern: weblogic.i18n.logging.NonCatalogLogger{*}
      - java.referenced:
          location: CONSTRUCTOR_CALL
          pattern: weblogic.i18n.logging.NonCatalogLogger{*}
  - message: Oracle Fast Connection Failover is specific property supported only by
      Oracle JDBC driver which provides support for their vendor's special features
      transparently to the application server in which they are deployed.. For example,
      one can supply a URL like this to the Oracle JDBC driver and the driver will
      provide transparent load-balancing and fail-over:. ```. <xa-datasource-property
      name="URL">jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=my.host.org)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=my.host.org)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=servjboss)(failover_mode=(type=select)(method=basic)))</xa-datasource-property>.
      ```
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-11
    when:
      xml:
        XPath: /jdbc-data-source/jdbc-driver-params/property/name[text()='FastConnectionFailoverEnabled']
  - message: Oracle WebLogic Server includes a proprietary side-by-side production
      redeployment feature. For applications that meet certain requirements and restrictions,
      the new version of the application is deployed while the older version is still
      running.. The old and new applications must be running on the same server or
      cluster. The new version of the application accepts new web session requests
      while the older version finishes processing requests already in process. Upon
      completion of the existing session requests, the older version of the application
      is then undeployed.. In JBoss EAP, you can either deploy the new application
      to a secondary server group or cluster, or deploy the new application serially
      to the same clustered domain.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-12
    when:
      filecontent:
        filename: MANIFEST.MF
        pattern: 'Weblogic-Application-Version:'
  - message: WebLogic administrators use wallets created by Oracle Wallet Manager
      to manage public key security credentials on application clients and servers..
      These wallets must first be converted to standard Java KeyStore (JKS) entries
      that can then be used to configure the credentials in JBoss EAP 6.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-13
    when:
      filecontent:
        filename: '{*}'
        pattern: oracle.net.wallet_location
  - message: '`weblogic.jndi.WLInitialContextFactory` is an implementation of `InitialContextFactory`
      used to get object instances from JNDI.. The equivalent functionality needs
      to be configured on JBoss EAP 6 using `org.jboss.naming.remote.client.InitialContextFactory`.
      Then the context could be instanticated as follows: `InitialContext ctx = new
      InitialContext();`.'
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-14
    when:
      filecontent:
        filename: '{*}.{ext}'
        pattern: weblogic.jndi.WLInitialContextFactory
  - message: Weblogicâ€™s implementation of the RMI specification uses a proprietary
      protocol known as T3. T3S is the version of the protocol over SSL.. `t3://`
      and `t3s://` URLs are used to configure a JNDI InitialContext within WebLogic..
      The equivalent functionality needs to be configured in JBoss EAP 6.. This could
      be done either by using standard Java EE JNDI names or by using a WebLogic proprietary
      library if the connectivity to WebLogic server is still required.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/weblogic/weblogic.windup.xml-15
    when:
      filecontent:
        filename: '{*}.{ext}'
        pattern: '{t3url}'
