- rules:
  - ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-0
    when:
    - java.referenced:
        pattern: org.jboss.seam.{*}
  - message: "\n                    You can use Java EE `javax.enterprise.context.Conversation`
      interface like:\n                    \n                    ```java\n                    @Inject
      Conversation conversation;\n                    ```\n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-1
    when:
    - java.referenced:
        pattern: org.jboss.seam.core.Conversation
  - message: |-
      There is no direct replacement for this Seam API. The `org.jboss.seam.Seam` contains methods for accessing annotated information
                          about Seam component classes. For majority cases you can replace this Seam API with standard CDI's `javax.enterprise.inject.spi.BeanManager`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-2
    when:
    - java.referenced:
        location: METHOD_CALL
        pattern: org.jboss.seam.Seam.{*}
  - message: "CDI supports static injection in comparison to Seam 2 dynamic injection.
      So you don't need to have `@Named` annotation on every Seam component you would
      like to migrate. \n                    Remove that annotation or change to `@javax.inject.Named`
      only if you need to access managed bean in Expression Language (EL)."
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-3
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Name
  - message: "Convert to a valid CDI scope. CDI scopes has its own annotation.\n                     See
      linked documentation link for CDI alternatives. For example, `@Scope(ScopeType.SESSION)`
      should be `@javax.enterprise.context.SessionScoped`. \n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-4
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Scope
  - message: Convert Seam annotation `@In` to CDI `@javax.inject.Inject`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-5
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.In
  - message: Remove this Seam annotation `@AutoCreate` as in CDI it is no longer needed
      since a bean will always be created when needed.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-6
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.AutoCreate
  - message: "\n                        CDI does not support bijection and does a
      static injection in comparison to Seam 2, where it is performed dynamically
      \n                            via interceptor every time a component is invoked.
      \n                        CDI performs the static injection only once per component
      life cycle.\n                        \n                        Refactor such
      Seam API usage with `@javax.enterprise.inject.Produces`.\n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-7
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Out
  - message: "\n                        Seam Factory annotation was used for binding
      non Seam component methods into Seam context life cycle.\n                        \n
      \                       Replace it with `@javax.enterprise.inject.Produces`
      and add additional annotation for context scope if you used `scope = ScopeType.*`
      enum like for instance\n                        `@Factory(scope = ScopeType.APPLICATION)`
      use:\n                        \n                        ```java\n                        @Produces
      @ApplicationScoped ...\n                        ```\n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-8
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Factory
  - message: Java EE uses for such use case `@javax.ejb.Singleton` and `@javax.ejb.Startup`
      annotations.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-9
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Startup
  - message: |-
      Seam 2 provided along to standard Java EE `javax.annotation.PostConstruct` also Seam specific annotation `@Create`.
                           You can use `@javax.annotation.PostConstruct` as one to one replacement.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-10
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Create
  - message: |-
      Seam 2 provided along to standard Java EE `javax.annotation.PreDestroy` also Seam specific annotation `@Destroy`.
                           You can use `@javax.annotation.PreDestroy` as one to one replacement.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-11
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Destroy
  - message: There is no direct replacement, but it can be implemented with CDI Conversation
      support.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-12
    when:
    - java.referenced:
        pattern: org.jboss.seam.faces.Switcher
  - message: "\n                    If you need to keep programmatic lookup use `javax.enterprise.inject.Instance`
      with injection. \n                    Like getting instance of `PaymentProcessor`:\n
      \                   \n                    ```java\n                    @Inject
      Instance<PaymentProcessor> paymentProcessor;\n                    ```\n                    \n
      \                   The second approach is to use `javax.enterprise.inject.spi.BeanManager`
      like\n                    \n                    ```java\n                    @Inject
      BeanManager manager;\n                    ```\n                    \n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-13
    when:
    - java.referenced:
        location: METHOD_CALL
        pattern: org.jboss.seam.Component.{*}
  - message: Refactor to have annotated error handler which redirect to a viewID page
      for displaying error page.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-14
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.exception.Redirect
  - message: |-
      Seam 2 offers the `@Install` annotation for controlling whether a given bean should be installed or not together with configurable functionality.
                          Explicit prevention from installation is in CDI done by `@Vetoed` annotation.
                          If you need to use Bean specialization there are `@javax.enterprise.inject.Alternative` or `@javax.enterprise.inject.Specializes` instead of precedence.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-15
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Install
  - message: Rework code with a default Java Servlet `javax.servlet.Filter` or different
      filter interface.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-16
    when:
    - java.referenced:
        pattern: org.jboss.seam.web.AbstractFilter
  - message: Replace this Seam annotation with default Java Servlet `javax.servlet.Filter`
      or different filter interface.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-17
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.web.Filter
  - message: Rework using CDI's injected concrete context.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-18
    when:
    - java.referenced:
        location: METHOD_CALL
        pattern: org.jboss.seam.contexts.Contexts.{*}
  - ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-19
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.bpm.{*}
  - message: Rework with CDI conversation context `javax.enterprise.context.Conversation`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-20
    when:
    - java.referenced:
        pattern: org.jboss.seam.core.ConversationEntry
  - message: Rework with `javax.enterprise.context.Conversation.begin()`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-21
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Begin
  - message: Rework with `javax.enterprise.context.Conversation.end()`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-22
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.End
  - message: "\n                    The `@RequestParameter` annotation triggers injection
      of an HTTP request parameter. \n                    The parameter name can be
      set explicitly as a value of the annotation or can be implied from the name
      of an injection point.\n                    \n                    Java EE 6
      does not have an annotation for this, however, the JSF 2 spec now has `<f:viewParam
      />` which can be used instead. "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-23
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.web.RequestParameter
  - message: "\n                        Seam 2 provides a built-in logger implementation.
      It is a thin wrapper that delegates to an available logging framework (log4j
      or JDK logging). \n                        Additionally, it provides extra features
      such as EL expression evaluation.\n                        \n                        Java
      SE or EE does not have anything that correlates to this, but you can your own
      Logger with simple producer for this case like:\n                        \n
      \                       ```java\n                        import javax.enterprise.inject.Produces;
      \ \n                        import javax.enterprise.inject.spi.InjectionPoint;
      \n                        \n                        @Singleton\n                        public
      class LoggerProducer {\n                            \n                            @Produces
      Logger createLogger(final InjectionPoint ip){\n                                return
      LoggerFactory.getLogger(ip.getMember().getDeclaringClass());\n                            }\n
      \                       \n                        }\n                        ```\n
      \                       \n                        and use it in your code like:\n
      \                       \n                        ```java\n                        @Inject
      private transient Logger logger;\n                        ```\n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-24
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Logger
  - message: "In Java EE, the Expression Language Specification has evolved and allows
      parameters to be passed to EL method expressions. \n                    This
      approach should be used as a replacement for the `@DataModel*` functionality.
      \n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-25
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.datamodel.DataModel{*}
  - message: "\n                    Both Seam 2 and CDI beans may produce and consume
      events in order to communicate with other beans. Unlike method invocation, events
      allow for decoupled architecture with no compile-time dependency.\n                    \n
      \                   In Seam 2, the type of an event is represented by a string
      value. Observer methods may observe one or more event types.\n                    \n
      \                   Unlike Seam 2, the process of observer method resolution
      is type-safe in CDI. A CDI event is represented by a payload (any Java object)
      and a set of qualifiers. The Java types of the event payload together with qualifiers
      determine which observer methods are notified of the event \n                    "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-26
    when:
    - or:
      - java.referenced:
          location: ANNOTATION
          pattern: org.jboss.seam.annotations.Observer
      - java.referenced:
          location: METHOD_CALL
          pattern: org.jboss.seam.core.Events.{*}
  - message: "\n                    In the Java EE, the concept of interceptors was
      extracted into a separate specification. As a result, not only EJBs but any
      CDI managed beans can benefit from this facility.\n\n                    If
      you used interceptors in Seam 2, migration is straightforward. The names and
      semantics of most of the annotations remain unchanged. If you used meta-annotations
      to bind interceptors to your beans in Seam 2, this idea (slightly modified)
      made it into the specification and is now know as an Interceptor binding. \n
      \                   "
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-27
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.intercept.{*}
  - message: Replace with Java EE annotation `@javax.ejb.Asynchronous`.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-28
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.async.Asynchronous
  - message: Replace with Java EE annotation `@javax.transaction.Transactional`. The
      usage and transaction types are the same like in Seam API.
    ruleID: http://github.com/windup/windup-rulesets/tree/master/rules/rules-reviewed/eap6/java-ee/seam/seam-java.windup.xml-29
    when:
    - java.referenced:
        location: ANNOTATION
        pattern: org.jboss.seam.annotations.Transactional
