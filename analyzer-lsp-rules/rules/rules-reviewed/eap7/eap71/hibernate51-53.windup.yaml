- - message: '`org.hibernate.engine.spi.SessionImplementor` parameter has to be changed
      to `org.hibernate.engine.spi.SharedSessionContractImplementor`.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-0
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: (org.hibernate.usertype.UserVersionType.next|org.hibernate.type.VersionType.next|org.hibernate.type.SingleColumnType.set|org.hibernate.type.AbstractStandardBasicType.set|org.hibernate.type.Type.resolve|org.hibernate.usertype.UserVersionType.seed|org.hibernate.type.VersionType.seed|org.hibernate.collection.spi.PersistentCollection.setCurrentSession|org.hibernate.type.ProcedureParameterNamedBinder.nullSafeSet|org.hibernate.type.Type.nullSafeSet|org.hibernate.usertype.UserType.nullSafeSet|org.hibernate.usertype.CompositeUserType.nullSafeSet|org.hibernate.type.Type.beforeAssemble|org.hibernate.type.AbstractStandardBasicType.nullSafeGet|org.hibernate.type.Type.nullSafeGet|org.hibernate.type.SingleColumnType.nullSafeGet|org.hibernate.usertype.UserType.nullSafeGet|org.hibernate.usertype.CompositeUserType.nullSafeGet|org.hibernate.type.Type.replace|org.hibernate.usertype.CompositeUserType.replace|org.hibernate.usertype.UserCollectionType.replaceElements|org.hibernate.collection.spi.PersistentCollection.unsetSession|org.hibernate.type.Type.hydrate|org.hibernate.type.Type.semiResolve|org.hibernate.usertype.CompositeUserType.assemble|org.hibernate.type.Type.assemble|org.hibernate.usertype.UserCollectionType.instantiate|org.hibernate.usertype.CompositeUserType.disassemble|org.hibernate.type.Type.disassemble|org.hibernate.type.ProcedureParameterExtractionAware.extract|org.hibernate.type.Type.isDirty|org.hibernate.type.Type.isModified|org.hibernate.type.SingleColumnType.get|org.hibernate.type.AbstractStandardBasicType.get|org.hibernate.usertype.UserCollectionType.wrap)(*org.hibernate.engine.spi.SessionImplementor*)
  - message: change reference to hibernate-java8 to hibernate-core (since hibernate-java8
      has been merged into hibernate-core module)
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-1
    when:
      or:
      - java.dependency:
          lowerbound: 0.0.0
          name: org.hibernate.{substitution}
      - java.dependency:
          lowerbound: 0.0.0
          name: org.hibernate.hibernate-core
        not: true
  - message: If the `SessionFactory` is built via Hibernateâ€™s native bootstrapping
      and `org.hibernate.HibernateException` or a subclass is referenced by the application.
      then set `hibernate.native_exception_handling_51_compliance` configuration property
      to `true`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-2
    when:
      java.referenced:
        location: IMPORT
        pattern: |-
          org.hibernate.(boot.archive.spi.ArchiveException|envers.exception.AuditException|jdbc.BatchFailedException|cache.CacheException|CallbackException
          |boot.registry.classloading.spi.ClassLoadingException|tool.schema.spi.CommandAcceptanceException|bytecode.enhance.spi.EnhancementException
          |tuple.entity.EntityMetamodel.ValueGenerationStrategyException|event.service.spi.EventListenerRegistrationException|HibernateError
          |id.IdentifierGenerationException|boot.model.naming.IllegalIdentifierException|tool.hbm2ddl.ImportScriptException
          |boot.spi.InFlightMetadataCollector.DuplicateSecondaryTableException|InstantiationException|secure.spi.IntegrationException|JDBCException
          |engine.jndi.JndiException|engine.jndi.JndiNameException|engine.transaction.jta.platform.spi.JtaPlatformException|LazyInitializationException
          |resource.transaction.LocalSynchronizationException|dialect.lock.LockingStrategyException|MappingException|loader.MultipleBagFetchException
          |procedure.NamedParametersNotSupportedException|result.NoMoreReturnsException|loader.custom.NonUniqueDiscoveredSqlAliasException
          |NonUniqueObjectException|NonUniqueResultException|procedure.NoSuchParameterException|bytecode.spi.NotInstrumentedException
          |service.NullServiceException|resource.transaction.NullSynchronizationException|procedure.ParameterMisuseException
          |engine.query.ParameterRecognitionException|procedure.ParameterStrategyException|PersistentObjectException|property.access.spi.PropertyAccessBuildingException
          |PropertyAccessException|property.access.spi.PropertyAccessSerializationException|PropertyValueException|QueryException
          |loader.plan.spi.QuerySpaceUidNotRegisteredException|ResourceClosedException|tool.schema.extract.spi.SchemaExtractionException|tool.schema.spi.SchemaManagementException
          |type.SerializationException|service.spi.ServiceException|SessionException|StaleStateException|boot.registry.selector.spi.StrategySelectionException
          |context.TenantIdentifierMismatchException|jdbc.TooManyRowsAffectedException|TransactionException|resource.transaction.TransactionRequiredForJoinException
          |TransientObjectException|TypeMismatchException|cache.spi.access.UnknownAccessTypeException|persister.spi.UnknownPersisterException|UnknownProfileException
          |service.UnknownServiceException|service.UnknownUnwrapTypeException|UnresolvableObjectException|UnsupportedLockAttemptException|WrongClassException)
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getDefaultQueryResultsCache()`
      should be used instead of `SessionFactoryImplementor.getQueryCache()` method.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-3
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getQueryCache()
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getDefaultQueryResultsCache(String
      regionName)` should be used instead of `SessionFactoryImplementor.getQueryCache(String
      regionName)` method.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-4
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getQueryCache(*String*)
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getTimestampsCache()`
      should be used instead of `SessionFactoryImplementor.getUpdateTimestampsCache()`
      method.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-5
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getUpdateTimestampsCache()
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getRegion(String
      regionName)` should be used instead of `SessionFactoryImplementor.getSecondLevelCacheRegion(String
      regionName)` method.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-6
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getSecondLevelCacheRegion(*String*)
  - message: Depending on the type of region, the appropriate method should be used
      instead:. * For an entity cache region, `org.hibernate.engine.spi.SessionFactoryImplementor.getMetamodel().entityPersister(
      entityName ).getCacheAccessStrategy()` should be used instead. * For a collection
      region, `org.hibernate.engine.spi.SessionFactoryImplementor.getMetamodel().collectionPersister(
      role ).getCacheAccessStrategy()` should be used instead. * For a natural ID
      region, `org.hibernate.engine.spi.SessionFactoryImplementor.getMetamodel().entityPersister(
      entityName ).getNaturalIdCacheAccessStrategy()` should be used instead
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-7
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getSecondLevelCacheRegionAccessStrategy(*String*)
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getRegion(String
      regionName)` should be used instead of `SessionFactoryImplementor.getNaturalIdCacheRegion(String
      regionName)` method.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-8
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getNaturalIdCacheRegion(*String*)
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getMetamodel().entityPersister(
      entityName ).getNaturalIdCacheAccessStrategy()` should be used instead of `SessionFactoryImplementor.getNaturalIdCacheRegionAccessStrategy(String
      regionName)` method.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-9
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getNaturalIdCacheRegionAccessStrategy(*String*)
  - message: '`org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getCacheRegionNames()`
      should be used to obtain all cache region names, then `org.hibernate.engine.spi.SessionFactoryImplementor.getCache().getRegion(String
      regionName)` should be used to look up each region.'
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-10
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.engine.spi.SessionFactoryImplementor.getAllSecondLevelCacheRegions()
  - message: Review usage of classes in `org.hibernate.cache.spi.RegionFactory`, as
      SPIs for this class has changed.. See Javadoc for `org.hibernate.cache.spi.RegionFactory`
      for details.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-11
    when:
      java.referenced:
        location: IMPORT
        pattern: org.hibernate.(cache.RegionFactory|cache.spi.RegionFactory|cache.spi.AbstractRegionFactory|testing.cache.CachingRegionFactory|cache.spi.support.RegionFactoryTemplate|cache.ehcache.EhCacheRegionFactory|cache.infinispan.InfinispanRegionFactory|cache.infinispan.JndiInfinispanRegionFactory|cache.internal.NoCachingRegionFactory|cache.ehcache.SingletonEhCacheRegionFactory)
  - message: One potential upgrade concern is any custom `org.hibernate.cache.spi.QueryCacheFactory`
      implementations.. `org.hibernate.cache.spi.QueryCacheFactory` was meant as a
      means to allow service providers the ability to define query result caching,
      generally with more stale-tolerant query result invalidation handling.. However,
      the contract also bound it to the old second level cache contracts so they had
      to be updated.. Its responsibilities also changed so we also decided to "rename
      it" to `org.hibernate.cache.spi.TimestampsCacheFactory`.. Details can be found
      in HHH-11356 JIRA issue (link below).
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-12
    when:
      java.referenced:
        location: IMPLEMENTS_TYPE
        pattern: org.hibernate.cache.spi.QueryCacheFactory
  - message: A change to be aware of is accessing cache entries via `SecondLevelCacheStatistics.getEntries()`
      and `NaturalIdCacheStatistics.getEntries()`.. These methods have been deprecated,
      however the new caching SPI does not really require caching providers to support
      this.. As of Hibernate 5.3 these methods inherently return an empty Map (`Collections#emptyMap`)..
      This has always been something that providers did not implement "correctly"
      anyway.. Details can be found in HHH-11356 JIRA issue (link below).
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-13
    when:
      java.referenced:
        location: METHOD_CALL
        pattern: org.hibernate.stat.(SecondLevelCacheStatistics|NaturalIdCacheStatistics).getEntries()
  - ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-14
    when:
      java.referenced:
        location: METHOD
        pattern: '*.getEntries()'
  - ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-15
    when:
      java.referenced:
        location: METHOD
        pattern: '*.getEntries()'
  - message: The SPIs in the `org.hibernate.{packages}` package have changed.. Any
      custom classes using those SPIs will need to be reviewed and updated.. See Javadoc
      for these packages for details.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-16
    when:
      java.referenced:
        location: IMPORT
        pattern: org.hibernate.(persister|tuple).*
  - message: Define `hibernate.default_schema` or `hibernate.default_catalog` (whichever
      is used by the selected dialect), or, alternatively, set `hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-17
    when:
      and:
      - as: persistence_files
        builtin.xml:
          xpath: //s:persistence-unit/s:provider[starts-with(text(), 'org.hibernate')]
        ignore: true
      - as: wrong_files
        builtin.xml:
          xpath: //s:properties[count(s:property[@name='hibernate.default_schema'])=0
            and count(s:property[@name='hibernate.default_catalog'])=0]
        from: persistence_files
        ignore: true
  - message: If the application uses Hibernate, please define `hibernate.default_schema`
      or `hibernate.default_catalog` (whichever is used by the selected dialect),
      or, alternatively, set `hibernate.hbm2ddl.jdbc_metadata_extraction_strategy=individually`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-18
    when:
      or:
      - as: persistence_files
        builtin.xml:
          xpath: //s:persistence-unit[not(s:provider) or s:provider[not(text())]]
        ignore: true
      - as: wrong_files
        builtin.xml:
          xpath: //s:properties[count(s:property[@name='hibernate.default_schema'])=0
            and count(s:property[@name='hibernate.default_catalog'])=0]
        from: persistence_files
        ignore: true
  - message: Applications using the `@TableGenerator` should set the `hibernate.id.generator.stored_last_used`
      configuration property to `false`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-19
    when:
      java.referenced:
        location: IMPORT
        pattern: javax.persistence.TableGenerator
  - message: Any references to `org.hibernate.{className}.getType()` must be replaced
      with `org.hibernate.{className}.getHibernateType()`.
    ruleID: ../../windup/windup-rulesets/rules/rules-reviewed/eap7/eap71/hibernate51-53.windup.xml-20
    when:
      java.referenced:
        pattern: org.hibernate.(engine.query.spi.NamedParameterDescriptor|engine.query.spi.OrdinalParameterDescriptor|query.procedure.internal.ProcedureParameterImpl|query.internal.QueryParameterImpl|query.internal.QueryParameterNamedImpl).getType(*)
