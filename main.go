// Code generated by xsdgen. DO NOT EDIT.

package main

import (
	"encoding/xml"
	"fmt"
	"io/fs"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/fabianvf/windup-rulesets-yaml/pkg/windup"
	"gopkg.in/yaml.v2"
)

func main() {
	err := filepath.WalkDir("../rules/", processXML)
	if err != nil {
		log.Fatal(err)
	}

}

func processXML(root string) fs.WalkDirFunc {
	return func(path string, d fs.DirEntry, err error) error {
		if !strings.HasSuffix(path, ".xml") {
			return nil
		}
		xmlFile, err := os.Open(path)
		if err != nil {
			fmt.Println(err)
			return err
		}
		defer xmlFile.Close()
		byteValue, err := ioutil.ReadAll(xmlFile)
		if err != nil {
			fmt.Println(err)
			return err
		}

		var ruleset windup.Ruleset

		err = xml.Unmarshal(byteValue, &ruleset)
		if err != nil {
			fmt.Println(err)
			return err
		}

		ruleset.SourceFile = strings.Replace(path, "../", "http://github.com/windup/windup-rulesets/tree/master/", 1)

		yamlPath := strings.Replace(strings.Replace(path, root, "converted/", 1), ".xml", ".yaml", 1)
		dirName := filepath.Dir(yamlPath)
		err = os.MkdirAll(dirName, 0777)
		if err != nil {
			fmt.Println(err)
			return err
		}
		file, err := os.OpenFile(yamlPath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)
		if err != nil {
			fmt.Println(err)
			return err
		}
		defer file.Close()

		enc := yaml.NewEncoder(file)

		err = enc.Encode(ruleset)
		if err != nil {
			fmt.Println(err)
			return err
		}
		return nil
	}
	return nil
}
